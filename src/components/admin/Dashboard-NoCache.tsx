import React, { useState, useEffect } from 'react';
import {
  Users,
  DollarSign,
  Calendar,
  TrendingUp,
  Bed,
  AlertCircle,
  CheckCircle,
  ArrowUpRight,
  Activity,
  RefreshCw
} from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { useNavigation } from "@/hooks/useNavigation";
import { KahaLogo } from "@/components/ui/KahaLogo";

/**
 * NO-CACHE DASHBOARD - PURE API CALLS ONLY
 * 
 * This dashboard implementation:
 * - Makes direct API calls with no caching
 * - Does not use AppContext state calculations
 * - Does not use service layers that might cache data
 * - Fetches fresh data on every load and refresh
 * - Shows real-time data with live indicators
 */
export const Dashboard = () => {
  const { goToBookings, goToLedger, goToStudentLedger } = useNavigation();

  // Pure API state - no mixed data sources
  const [data, setData] = useState({
    totalStudents: 0,
    totalCollected: 0,
    outstandingDues: 0,
    monthlyRevenue: 0,
    occupancyRate: 0,
    availableRooms: 0,
    pendingPayments: 0,
    studentsWithDues: [],
    recentActivities: []
  });
  
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());

  // Direct API calls - NO CACHE, NO SERVICE LAYER
  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('🔄 Fetching dashboard data - NO CACHE, DIRECT API CALLS');
      
      // API base URL - direct calls
      const API_BASE = 'http://localhost:3001/hostel/api/v1';
      
      // Parallel API calls for better performance
      const [statsResponse, paymentsResponse, duesResponse, activitiesResponse] = await Promise.all([
        // Dashboard stats
        fetch(`${API_BASE}/dashboard/stats`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
          }
        }),
        
        // All payments for total collected
        fetch(`${API_BASE}/payments`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
          }
        }),
        
        // Students with outstanding dues
        fetch(`${API_BASE}/dashboard/checked-out-dues`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
          }
        }),
        
        // Recent activities
        fetch(`${API_BASE}/dashboard/recent-activity?limit=8`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
          }
        })
      ]);\n\n      // Process dashboard stats\n      if (!statsResponse.ok) {\n        throw new Error(`Stats API failed: ${statsResponse.status}`);\n      }\n      const stats = await statsResponse.json();\n      console.log('📊 Stats API Response:', stats);\n\n      // Process payments for total collected\n      let totalCollected = 0;\n      if (paymentsResponse.ok) {\n        const paymentsData = await paymentsResponse.json();\n        console.log('💰 Payments API Response:', paymentsData);\n        \n        if (paymentsData.data) {\n          const payments = paymentsData.data.items || paymentsData.data;\n          totalCollected = payments.reduce((sum: number, payment: any) => {\n            return sum + (parseFloat(payment.amount) || 0);\n          }, 0);\n        }\n      }\n\n      // Process students with dues\n      let studentsWithDues: any[] = [];\n      let outstandingDues = 0;\n      if (duesResponse.ok) {\n        const duesData = await duesResponse.json();\n        console.log('👥 Dues API Response:', duesData);\n        \n        studentsWithDues = duesData.data || [];\n        outstandingDues = studentsWithDues.reduce((sum: number, student: any) => {\n          return sum + (parseFloat(student.outstandingDues) || 0);\n        }, 0);\n      }\n\n      // Process recent activities\n      let recentActivities: any[] = [];\n      if (activitiesResponse.ok) {\n        const activitiesData = await activitiesResponse.json();\n        console.log('📋 Activities API Response:', activitiesData);\n        recentActivities = activitiesData.data || activitiesData || [];\n      }\n\n      // Update state with fresh API data\n      setData({\n        totalStudents: stats.totalStudents || 0,\n        totalCollected: totalCollected,\n        outstandingDues: outstandingDues,\n        monthlyRevenue: stats.monthlyRevenue?.amount || 0,\n        occupancyRate: stats.occupancyPercentage || 0,\n        availableRooms: stats.availableRooms || 0,\n        pendingPayments: stats.pendingPayments || 0,\n        studentsWithDues: studentsWithDues,\n        recentActivities: recentActivities.slice(0, 6)\n      });\n      \n      setLastUpdated(new Date());\n      console.log('✅ Dashboard updated with fresh API data - NO CACHE');\n      \n    } catch (err: any) {\n      console.error('❌ Error fetching dashboard data:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load data on component mount\n  useEffect(() => {\n    fetchDashboardData();\n  }, []);\n\n  // Stats configuration\n  const stats = [\n    {\n      title: \"Total Students\",\n      value: data.totalStudents.toString(),\n      change: `${data.totalStudents} active`,\n      icon: Users,\n      color: \"from-blue-500 to-blue-600\",\n      onClick: () => goToLedger('students')\n    },\n    {\n      title: \"Total Collected\",\n      value: `NPR ${data.totalCollected.toLocaleString()}`,\n      change: \"All time revenue\",\n      icon: DollarSign,\n      color: \"from-green-500 to-green-600\",\n      onClick: () => goToLedger('invoices')\n    },\n    {\n      title: \"Available Rooms\",\n      value: data.availableRooms.toString(),\n      change: `${data.occupancyRate}% occupancy`,\n      icon: Bed,\n      color: \"from-orange-500 to-orange-600\",\n      onClick: goToBookings\n    },\n    {\n      title: \"Outstanding Dues\",\n      value: `NPR ${data.outstandingDues.toLocaleString()}`,\n      change: `${data.studentsWithDues.length} students`,\n      icon: TrendingUp,\n      color: \"from-red-500 to-red-600\"\n    }\n  ];\n\n  // Error state\n  if (error) {\n    return (\n      <div className=\"space-y-8\">\n        <Card className=\"border-red-200 bg-red-50\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <AlertCircle className=\"h-6 w-6 text-red-600\" />\n              <div>\n                <h3 className=\"font-semibold text-red-900\">Dashboard API Error</h3>\n                <p className=\"text-red-700\">{error}</p>\n                <Button\n                  onClick={fetchDashboardData}\n                  size=\"sm\"\n                  className=\"mt-2 bg-red-600 hover:bg-red-700\"\n                >\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\n                  Retry\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Welcome Header with No-Cache Indicator */}\n      <div className=\"bg-gradient-to-r from-green-500 via-blue-500 to-green-600 rounded-2xl p-8 text-white relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-black/10\"></div>\n        <div className=\"absolute top-0 right-0 w-64 h-64 bg-white/5 rounded-full -translate-y-32 translate-x-32\"></div>\n        <div className=\"absolute bottom-0 left-0 w-48 h-48 bg-white/5 rounded-full translate-y-24 -translate-x-24\"></div>\n        <div className=\"relative z-10\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-6\">\n              <div className=\"bg-white/20 backdrop-blur-sm rounded-2xl p-4\">\n                <KahaLogo size=\"lg\" />\n              </div>\n              <div>\n                <div className=\"flex items-center gap-4 mb-2\">\n                  <h1 className=\"text-4xl font-bold\">\n                    Live Dashboard - No Cache\n                  </h1>\n                  <Button\n                    onClick={fetchDashboardData}\n                    disabled={loading}\n                    size=\"sm\"\n                    className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\"\n                  >\n                    <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n                    Refresh\n                  </Button>\n                </div>\n                <p className=\"text-green-100 text-lg font-medium\">\n                  Last updated: {lastUpdated.toLocaleTimeString()} • Managing {data.totalStudents} students with live API data\n                </p>\n                <div className=\"flex items-center gap-4 mt-3\">\n                  <div className=\"flex items-center gap-2 bg-white/20 backdrop-blur-sm rounded-full px-3 py-1\">\n                    <div className={`w-2 h-2 rounded-full ${loading ? 'bg-yellow-300 animate-pulse' : 'bg-green-300'}`}></div>\n                    <span className=\"text-sm font-medium\">{loading ? 'Loading...' : 'Live Data'}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 bg-white/20 backdrop-blur-sm rounded-full px-3 py-1\">\n                    <Activity className=\"h-4 w-4\" />\n                    <span className=\"text-sm font-medium\">No Cache Mode</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"hidden lg:block\">\n              <div className=\"bg-white/20 backdrop-blur-sm rounded-xl p-6 text-center\">\n                <div className=\"text-3xl font-bold mb-1\">{data.occupancyRate}%</div>\n                <div className=\"text-sm text-green-100\">Occupancy Rate</div>\n                <div className=\"w-16 h-2 bg-white/30 rounded-full mt-2 mx-auto\">\n                  <div\n                    className=\"h-full bg-white rounded-full transition-all duration-500\"\n                    style={{ width: `${data.occupancyRate}%` }}\n                  ></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {stats.map((stat, index) => {\n          const Icon = stat.icon;\n\n          return (\n            <Card\n              key={index}\n              className=\"group hover:shadow-xl transition-all duration-300 cursor-pointer border-0 bg-white hover:scale-105 relative overflow-hidden\"\n              onClick={stat.onClick}\n            >\n              <div className={`absolute inset-0 bg-gradient-to-br ${stat.color} opacity-0 group-hover:opacity-5 transition-opacity duration-300`}></div>\n              <CardContent className=\"p-6 relative\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className={`p-3 rounded-xl bg-gradient-to-br ${stat.color} text-white shadow-lg`}>\n                    <Icon className=\"h-6 w-6\" />\n                  </div>\n                  <div className={`w-2 h-2 rounded-full ${loading ? 'bg-yellow-500 animate-pulse' : 'bg-green-500'}`}></div>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 mb-1\">{stat.title}</p>\n                  <p className=\"text-3xl font-bold text-gray-900 mb-2\">{stat.value}</p>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"h-2 w-2 bg-green-500 rounded-full animate-pulse\"></div>\n                    <p className=\"text-sm text-gray-600\">{stat.change}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Students with Outstanding Dues */}\n        <Card className=\"border-0 shadow-lg bg-gradient-to-br from-red-50 to-orange-50\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-red-100 rounded-lg\">\n                  <AlertCircle className=\"h-5 w-5 text-red-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Outstanding Dues</h3>\n                  <p className=\"text-sm text-gray-600\">NPR {data.outstandingDues.toLocaleString()} total pending</p>\n                </div>\n              </div>\n              <Badge className=\"bg-red-100 text-red-700\">\n                {data.studentsWithDues.length} students\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {data.studentsWithDues.length > 0 ? (\n                data.studentsWithDues.map((student: any, index: number) => (\n                  <div key={index} className=\"group bg-white rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-200 border border-red-100\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-gradient-to-br from-red-500 to-red-600 rounded-full flex items-center justify-center text-white font-bold text-sm\">\n                          {student.studentName?.charAt(0) || 'S'}\n                        </div>\n                        <div>\n                          <p className=\"font-semibold text-gray-900\">{student.studentName}</p>\n                          <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                            <span>Room {student.roomNumber}</span>\n                            <span>{student.studentId}</span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-bold text-red-600 text-xl\">\n                          NPR {parseFloat(student.outstandingDues || 0).toLocaleString()}\n                        </p>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => goToStudentLedger(student.studentId)}\n                          className=\"mt-2 group-hover:bg-red-50 border-red-200 text-red-700 hover:text-red-800\"\n                        >\n                          View Ledger\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-12 bg-white rounded-xl\">\n                  <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">All Clear!</h3>\n                  <p className=\"text-gray-600\">All students are up to date with payments</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Activities */}\n        <Card className=\"border-0 shadow-lg bg-gradient-to-br from-blue-50 to-indigo-50\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\n                  <Activity className=\"h-5 w-5 text-blue-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Recent Activities</h3>\n                  <p className=\"text-sm text-gray-600\">Live updates from API</p>\n                </div>\n              </div>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={fetchDashboardData}\n                disabled={loading}\n                className=\"border-blue-200 text-blue-700 hover:bg-blue-50\"\n              >\n                <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n                Refresh\n              </Button>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {data.recentActivities.length > 0 ? (\n                data.recentActivities.map((activity: any, index: number) => {\n                  const getActivityIcon = (type: string) => {\n                    switch (type) {\n                      case 'booking': return Calendar;\n                      case 'payment': return DollarSign;\n                      case 'checkin': return Users;\n                      default: return Activity;\n                    }\n                  };\n\n                  const getActivityColor = (type: string) => {\n                    switch (type) {\n                      case 'booking': return 'from-purple-500 to-purple-600';\n                      case 'payment': return 'from-green-500 to-green-600';\n                      case 'checkin': return 'from-blue-500 to-blue-600';\n                      default: return 'from-gray-500 to-gray-600';\n                    }\n                  };\n\n                  const ActivityIcon = getActivityIcon(activity.type);\n\n                  return (\n                    <div key={index} className=\"group bg-white rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-200 border border-blue-100\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`w-10 h-10 bg-gradient-to-br ${getActivityColor(activity.type)} rounded-full flex items-center justify-center text-white`}>\n                          <ActivityIcon className=\"h-5 w-5\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium text-gray-900\">{activity.message}</p>\n                          <p className=\"text-sm text-gray-600\">{activity.time}</p>\n                        </div>\n                        <Badge className={`${activity.type === 'payment' ? 'bg-green-100 text-green-700' : activity.type === 'booking' ? 'bg-purple-100 text-purple-700' : 'bg-blue-100 text-blue-700'} font-medium px-2 py-1 rounded-full text-xs`}>\n                          {activity.type}\n                        </Badge>\n                      </div>\n                    </div>\n                  );\n                })\n              ) : (\n                <div className=\"text-center py-12 bg-white rounded-xl\">\n                  <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Activity className=\"h-8 w-8 text-blue-600\" />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">No Recent Activities</h3>\n                  <p className=\"text-gray-600\">Recent activities will appear here</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Debug Information Panel */}\n      <Card className=\"bg-blue-50 border-blue-200\">\n        <CardHeader>\n          <CardTitle className=\"text-sm text-blue-800 flex items-center gap-2\">\n            <Activity className=\"h-4 w-4\" />\n            🔍 No-Cache Implementation Details\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-xs text-blue-700\">\n            <div className=\"space-y-1\">\n              <div>✅ Direct API calls - no service layer caching</div>\n              <div>✅ No AppContext state calculations</div>\n              <div>✅ No localStorage or sessionStorage usage</div>\n              <div>✅ Cache-Control: no-cache headers</div>\n            </div>\n            <div className=\"space-y-1\">\n              <div>📊 API Base: http://localhost:3001/hostel/api/v1</div>\n              <div>🕒 Last Updated: {lastUpdated.toLocaleString()}</div>\n              <div>🔄 Refresh: Manual + Auto on load</div>\n              <div>📈 Data: 100% Live from API</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};